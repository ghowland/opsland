name: Example 0 Bundle


# HTTP root for this bundle.  Allows multiple bundles to coexist on the same server.  Hostnames are not considered, all paths are global once they reach OpsLand
#NOTE: No leading / for the root.  If mounted at "/" then leave this empty
root: ""


# Git repos we want to sync
git: {}


# Put all our data cache in here, 1 file per Cache Key to make it simple and glob them all back up
path:
  # Cache results from CLI-JSON runs.  This will get as big as the content times the number of max items if they are a queue.
  cache: ~/.cache/opsland/example0/cache/{key}

  # Keep summary separate, just to be more organized on disk.  In memory, Cache and Summary data are in the same Bundle cache bucket
  summary: ~/.cache/opsland/example0/summary/{key}

  # Login static information.  Not using Okta 
  login_sessions: ~/.secure/opsland/logins.json


# Running commands while waiting on shell commands is no good, so everything should be done in a deferred manner.  Scheduled or as a Job execution.  Same thing ultimately
schedule:
  period:
    mtr:
      command: /Users/geoff/work/opsland/opsland-example/opsland_example.py go
      dir: ~/work/opsland-example/
      period: 15s
      # store: single
      store: queue
      max: 20

    deep:
      command: /Users/geoff/work/opsland/opsland-example/opsland_example.py deep
      dir: ~/work/opsland-example/
      period: 15s


# Every time we write data, we have the opportunity to summarize data that is not single (ex: queue)
summary:
  # Will be found in Cache with the prefix "summary.schedule.period.mtr", but with specific things being like: `summary.schedule.period.mtr.average` and then 
  #   their summary being: `summary.schedule.period.mtr.average.max` for the max value
  schedule.period.mtr:
    # Final values will be coerced to float values.  Creates: min, max, last, average, mean, stddev, timeseries
    type: float

    # If group_by exists, we will make N results.  1 per each group found, this will append an additional string, so you need to know how to reference this
    fields:
      hop_count: [hop_count]
      average: [mtr_last, average]
      last: [mtr_last, last]
      best: [mtr_last, best]
      worst: [mtr_last, worst]
      loss: [mtr_last, loss]


# HTTP Routing and Rendering.  All paths overlay over the `root`
http:
  post:
    modal/yes_no:
      template: returns/modal_yes_no.html.j2

  get:
    # /other
    other:
      template: pages/generic_other.html.j2

      cache:
        schedule.period.deep: deep

    # /status
    status:
      template: pages/generic_view.html.j2

      # Extract data from this Cache, to be used for rendering
      cache:
        schedule.period.mtr: mtr
        summary.schedule.period.mtr.best.timeseries: series_best
        summary.schedule.period.mtr.worst.timeseries: series_worst
        
        summary.schedule.period.mtr.best.mean: series_mean

      page: Home
      page_group: Info
      breadcrumbs:
        - For: /else
        - The: /if
        - Win: /not

      data:
        # A table using a Dict of Dicts
        table_dict:
          # Payload output key
          table_data_dict:
            cache: mtr
            key: data_dict
            name: Example Data 1
            element: generic_table
            link: "/example/%(_key)s"
            fields:
              - first: First
              - second: Second
            no_max_height: True

        # A table using a List of Dicts
        table_list:
          # Payload output key
          table_data_list:
            cache: mtr
            key: mtr
            name: Hop
            element: generic_table
            link: "/example/%(target)s"
            link_field: index
            fields:
              - ip: IP
              - loss: Loss
              - sent: Sent
              - last: Last
              - average: Avg
              - best: Best
              - worst: Worse
              - stddev: StdDev
            no_max_height: True
        
        # Graphs.  Like like graphs, or scatter plots.  With Graph.js
        graph:
          best:
            label: Best ICMP in ms
            cache: series_best
            element: graph_best

          worst:
            label: Worst ICMP in ms
            cache: series_worst
            element: graph_worst



# Site NavBar and User links.  Overlays over the `root`.
nav:
  bar:
    Home: /
    Info: /info
    Work: /work
    Status: /status
    Problems: /problem
  
  user:
    Status: /status
    Progress: /progress
    Work: /work
    Settings: /settings
    Sign Out: /signout

