name: Example 0 Bundle


# HTTP root for this bundle.  Allows multiple bundles to coexist on the same server.  Hostnames are not considered, all paths are global once they reach OpsLand
#NOTE: No leading / for the root.  If mounted at "/" then leave this empty
root: ""


# Git repos we want to sync
git: {}


# Put all our data cache in here, 1 file per Cache Key to make it simple and glob them all back up
path:
  # Cache results from CLI-JSON runs.  This will get as big as the content times the number of max items if they are a queue.
  cache: ~/.cache/opsland/example0/cache/{key}

  # Keep summary separate, just to be more organized on disk.  In memory, Cache and Summary data are in the same Bundle cache bucket
  summary: ~/.cache/opsland/example0/summary/{key}

  # Login static information.  Not using Okta 
  login_sessions: ~/.secure/opsland/logins.json


# This is how we authenticate into this Bundle
auth:
  # Auth using cookies, compare username and token cookie to our cached data to get their authed session
  cookie:
    username: username
    token: token

    # Use this cache to verify the username and token field
    cache: execute.api.login.{session.username}

    # Put this data into the user session, so it is always available to us
    session:
      cache:
        execute.api.site_user.{session.username}:
          email: [email]
          name_first: [name_first]
          title: [title]


# Running commands while waiting on shell commands is no good, so everything should be done in a deferred manner.  Scheduled or as a Job execution.  Same thing ultimately
schedule:
  period:
    mtr:
      command: /mnt/d/_OpsLand/opsland-example/opsland_example.py go
      dir: ~/work/opsland-example/
      period: 15s
      # store: single
      store: queue
      max: 20

    deep:
      command: /mnt/d/_OpsLand/opsland-example/opsland_example.py deep
      dir: ~/work/opsland-example/
      period: 15s

    2x:
      command: /mnt/d/_OpsLand/opsland-example/opsland_example.py -i /tmp/opsland/input_2x.json 2x
      dir: ~/work/opsland-example/
      period: 15s
      input_path: /tmp/opsland/input_2x.json
      input:
        schedule.period.mtr:
          mtr: [-1, mtr, -1]


# These commands will be executed at specific times, such as during an HTTP request
execute:
  # This bucket helps organize different things we want to execute, but other things could potentially call things from api
  api:
    # CRUD: User
    site_user:
      command: /mnt/d/_OpsLand/opsland-example/opsland_example.py -i /tmp/opsland/crud_user.json crud_user
      dir: ~/work/opsland-example/
      input_path: /tmp/opsland/crud_user.json
      input:
        request:
          record_id: [username]

      # If this exists, we use it to save all our cache data to unique files.  They will also be loaded uniquely
      unique_key: "{username}"

    # Login for users
    login:
      #TODO(geoff): Need to pass it as STDIN, or make totally unique files
      command: /mnt/d/_OpsLand/opsland-example/opsland_example.py -i /tmp/opsland/site_login_{uuid}.json site_login
      dir: ~/work/opsland-example/
      input_path: /tmp/opsland/site_login_{uuid}.json
      input:
        # Pass through our request data
        request:
          record_id: [username]

        # Fetch our user data for this use as well
        execute.api.site_user.{request.username}:
          matched: []

      # If this exists, we use it to save all our cache data to unique files.  They will also be loaded uniquely
      unique_key: "{username}"


# Every time we write data, we have the opportunity to summarize data that is not single (ex: queue)
summary:
  # Will be found in Cache with the prefix "summary.schedule.period.mtr", but with specific things being like: `summary.schedule.period.mtr.average` and then 
  #   their summary being: `summary.schedule.period.mtr.average.max` for the max value
  schedule.period.mtr:
    # Final values will be coerced to float values.  Creates: min, max, last, average, mean, stddev, timeseries
    type: float

    # If group_by exists, we will make N results.  1 per each group found, this will append an additional string, so you need to know how to reference this
    fields:
      hop_count: [hop_count]
      average: [mtr_last, average]
      last: [mtr_last, last]
      best: [mtr_last, best]
      worst: [mtr_last, worst]
      loss: [mtr_last, loss]


# HTTP Routing and Rendering.  All paths overlay over the `root`
http:
  post:
    # Login
    api/login:
      template: returns/api_login.html.j2
      execute: execute.api.login

    # CRUD: User
    api/site_user:
      execute: execute.api.site_user

    modal/yes_no:
      template: returns/modal_yes_no.html.j2

  get:
    # Paths
    test:
      template: pages/generic_test.html.j2

    test2:
      template: pages/generic_test_flowbite.html.j2

    test3:
      template: pages/generic_test_flowbite2.html.j2

    test4:
      template: pages/generic_test_flowbite3.html.j2

    test5:
      template: pages/generic_test_flowbite4.html.j2

    test6:
      template: pages/generic_test_flowbite5.html.j2

    test7:
      template: pages/generic_test_flowbite6.html.j2

    test8:
      template: pages/generic_test_flowbite7.html.j2

    test9:
      template: pages/generic_test_flowbite8.html.j2

    test10:
      template: pages/generic_test_flowbite9.html.j2

    test11:
      template: pages/generic_test_flowbite10.html.j2

    test12:
      template: pages/generic_test_flowbite11.html.j2

    test13:
      template: pages/generic_test_flowbite12.html.j2

    opsland/status:
      template: returns/opsland_status.html.j2

    # /login
    login:
      template: pages/site_login.html.j2

    # /register
    register:
      template: pages/site_register.html.j2

    # /password-reset
    password-reset:
      template: pages/site_password_reset.html.j2

    # /social-proof
    social-proof:
      template: pages/example_social_proof.html.j2

    pricing:
      template: pages/example_pricing.html.j2

    team:
      template: pages/example_team.html.j2

    user-onboard:
      template: pages/example_user_onboard.html.j2

    testimonial:
      template: pages/example_testimonial.html.j2

    newsletter:
      template: pages/example_newsletter.html.j2

    newsletter2:
      template: pages/example_newsletter2.html.j2

    maintenance:
      template: pages/example_maintenance.html.j2

    account-recovery1:
      template: pages/example_account_recovery1.html.j2

    account-recovery2:
      template: pages/example_account_recovery2.html.j2

    account-recovery3:
      template: pages/example_account_recovery3.html.j2

    account-recovery4:
      template: pages/example_account_recovery4.html.j2

    account-recovery5:
      template: pages/example_account_recovery5.html.j2

    "500":
      template: pages/example_500.html.j2

    "404":
      template: pages/example_404.html.j2

    hero:
      template: pages/example_hero.html.j2

    feature:
      template: pages/example_feature.html.j2

    faq:
      template: pages/example_faq.html.j2

    customer-logos:
      template: pages/example_customer_logos.html.j2

    banner1:
      template: pages/example_banner1.html.j2

    banner2:
      template: pages/example_banner2.html.j2

    banner3:
      template: pages/example_banner3.html.j2

    banner4:
      template: pages/example_banner4.html.j2

    banner5:
      template: pages/example_banner5.html.j2

    cta:
      template: pages/example_cta.html.j2

    contact:
      template: pages/example_contact.html.j2

    content-sections:
      template: pages/example_content_sections.html.j2

    cookie-consent1:
      template: pages/example_cookie_consent1.html.j2

    cookie-consent2:
      template: pages/example_cookie_consent2.html.j2

    cookie-consent3:
      template: pages/example_cookie_consent3.html.j2

    cookie-consent4:
      template: pages/example_cookie_consent4.html.j2

    headers:
      template: pages/example_headers.html.j2

    footers:
      template: pages/example_footers.html.j2

    popup1:
      template: pages/example_popup1.html.j2

    popup2:
      template: pages/example_popup2.html.j2

    popup3:
      template: pages/example_popup3.html.j2

    popup4:
      template: pages/example_popup4.html.j2

    popup5:
      template: pages/example_popup5.html.j2

    # /user
    user:
      template: pages/site_user.html.j2

      cache:
        schedule.period.deep:
          deep: []
        # In this way, selectors can be added right into the key to get from the cache.  This means we expect this data
        execute.api.site_user.{user}:
          user: []

      page: User
      page_group: Status
      breadcrumbs:
        - Any: /else
        - Old: /if
        - Day: /not

    # /status
    status:
      template: pages/generic_view.html.j2

      # Extract data from this Cache, to be used for rendering
      cache:
        schedule.period.mtr: 
          mtr: []
        schedule.period.2x:
          twox: []
        summary.schedule.period.mtr.best.timeseries:
          series_best: []
        summary.schedule.period.mtr.worst.timeseries:
          series_worst: []
        summary.schedule.period.mtr.loss.timeseries:
          series_loss: []
        summary.schedule.period.mtr.best.mean:
          series_mean: []

      page: Home
      page_group: Info
      breadcrumbs:
        - For: /else
        - The: /if
        - Win: /not

      data:
        # A table using a Dict of Dicts
        table_dict:
          # Payload output key
          table_data_dict:
            cache: mtr
            key: [-1, data_dict]
            name: Example Data 1
            element: generic_table
            link: "/example/%(_key)s"
            fields:
              - first: First
              - second: Second
            no_max_height: True

        # A table using a List of Dicts
        table_list:
          # Payload output key
          table_data_list:
            cache: mtr
            key: [-1, mtr]
            name: Hop
            element: generic_table
            link: "/example/%(target)s"
            link_field: index
            fields:
              - ip: IP
              - loss: Loss
              - sent: Sent
              - last: Last
              - average: Avg
              - best: Best
              - worst: Worse
              - stddev: StdDev
            no_max_height: True
        
        # Graphs.  Like like graphs, or scatter plots.  With Graph.js
        graph:
          best:
            label: Best ICMP in ms
            cache: series_best
            element: graph_best

          worst:
            label: Worst ICMP in ms
            cache: series_worst
            element: graph_worst

          loss:
            label: Loss in ICMP
            cache: series_loss
            element: graph_loss


# Site NavBar and User links.  Overlays over the `root`.
nav:
  bar:
    Home: /
    Info: /info
    Work: /work
    Status: /status
    Problems: /problem
  
  user:
    Status: /status
    Progress: /progress
    Work: /work
    Settings: /settings
    Sign Out: /signout

